{"/home/travis/build/npmtest/node-npmtest-node-config-manager/test.js":"/* istanbul instrument in package npmtest_node_config_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-config-manager/lib.npmtest_node_config_manager.js":"/* istanbul instrument in package npmtest_node_config_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_config_manager = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_config_manager = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-config-manager/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-config-manager && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_config_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_config_manager\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_config_manager.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_config_manager.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_config_manager.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_config_manager.__dirname + '/lib.npmtest_node_config_manager.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/index.js":"'use strict';\n\n/**\n * Module exports\n */\n\nvar ConfigManager = require('./lib/ConfigManager');\n\nmodule.exports = ConfigManager;","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/lib/ConfigManager.js":"/* See LICENSE file for terms of use */\n'use strict';\n\n// import libraries\nvar path = require('path'),\n    debug = require('debug')('configmanager:configmanager'),\n    error = require('./error'),\n    uObject = require('./utils/object'),\n    uArray = require('./utils/array'),\n    FileManager = require('./FileManager'),\n    parser = require('./parser/parameter');\n\n/**\n * STATIC (default)\n **/\nvar DEFAULT_CONFIG_DIR = 'config/',\n    DEFAULT_ENV = '',\n    DEFAULT_CAMELCASE = false;\n\n//List of key availables\nvar keys = ['configDir', 'env', 'camelCase'],\n    envArgs = process.env,\n    fileManager = null;\n\n/**\n * ConfigManager constructor.\n *\n * The export object of the 'ConfigManager' module is an instance of this class\n * Most apps will only use this one instance\n *\n * @api public\n */\nfunction ConfigManager() {\n    //Init store and method variables\n    this.store = {};\n    this.method = {};\n\n    //Load config directory\n    this.configDir = envArgs.NODE_CONFIG_DIR;\n\n    if (!this.configDir || 'string' !== typeof this.configDir) {\n        this.configDir = path.resolve(process.cwd(), DEFAULT_CONFIG_DIR) + '/';\n    } else {\n        this.configDir = path.resolve(this.configDir) + '/';\n    }\n\n    //Load env\n    this.env = envArgs.NODE_ENV;\n\n    if (!this.env || 'string' !== typeof this.env) {\n        this.env = DEFAULT_ENV;\n    }\n\n    //Default options\n    this.camelCase = envArgs.NODE_CAMEL_CASE;\n\n    switch (this.camelCase) {\n        case 'true':\n            this.camelCase = true;\n            break;\n        case 'false':\n            this.camelCase = false;\n            break;\n        default:\n            if (!this.camelCase || 'boolean' !== typeof this.camelCase) {\n                this.camelCase = DEFAULT_CAMELCASE;\n            }\n            break;\n    }\n\n    debug('Create ConfigManager object [configDir: %s | env: %s | camelCase: %s]', this.configDir, this.env, this.camelCase);\n}\n\n/**\n * ConfigManager constructor\n *\n * The exports of the config manager module is an instance of this class.\n *\n * ####Example:\n * var configManager = require('configManager');\n * var configManager2 = new configManager.ConfigManager();\n *\n * @method ConfigManager\n *\n * @api public\n */\n\nConfigManager.prototype.ConfigManager = ConfigManager;\n\n/**\n * ConfigManager initialization\n *\n * ####Example:\n * configManager.init({\n *    configDir: '~/Desktop/config',\n *    env: 'develop',\n *    camelCase: true\n * });\n *\n * @param {Object} options\n * @method init\n *\n * @api public\n */\nConfigManager.prototype.init = function (options) {\n    if (this.count() > 0) {\n        throw new Error(error.MANAGER_CAN_NOT_BE_INITIALIZE_ANYMORE);\n    }\n\n    options = options || {};\n\n    //Load options\n    this.configDir = options.configDir ? options.configDir : this.configDir;\n    this.env = options.env ? options.env : this.env;\n    this.camelCase = options.camelCase ? options.camelCase : this.camelCase;\n\n    debug('Initialization of the ConfigManager object [configDir: %s | env: %s | camelCase: %s]', this.configDir, this.env, this.camelCase);\n    return this;\n};\n\n/**\n *  Sets ConfigManager options\n *\n * ####Example:\n * configManager.set('configDir','~/Desktop/config');\n * configManager\n *  .set('configDir', '~/Desktop/config')\n *  .set('camelCase', true);\n *\n * @param {String} key\n * @param {String} value\n * @method set\n *\n * @api public\n */\nConfigManager.prototype.set = function (key, value) {\n    if (arguments.length < 2 || 'string' !== typeof key) {\n        throw new Error(error.BAD_PARAMETER);\n    }\n\n    switch (key) {\n        case keys[0]:\n            //configDir\n            if ('string' !== typeof value) {\n                throw new Error(error.BAD_TYPE_MUST_BE_STRING + value);\n            }\n            this.configDir = path.resolve(value) + '/';\n            break;\n        case keys[1]:\n            //env\n            if ('string' !== typeof value) {\n                throw new Error(error.BAD_TYPE_MUST_BE_STRING + value);\n            }\n            this.env = value;\n\n            break;\n        case keys[2]:\n            //camelCase\n            if ('boolean' !== typeof value) {\n                throw new Error(error.BAD_TYPE_MUST_BE_BOOLEAN + value);\n            }\n            this.camelCase = value;\n\n            break;\n        default:\n            throw new Error(error.OPTION_NOT_EXISTS);\n    }\n\n    return this;\n};\n\n/**\n * Gets ConfigManager options\n *\n * ####Example:\n * configManager.get('camelCase');\n *\n * @param {String} key\n * @method get\n *\n * @api public\n */\nConfigManager.prototype.get = function (key) {\n    if (arguments.length < 1 || 'string' !== typeof key) {\n        throw new Error(error.BAD_PARAMETER);\n    }\n\n    if (!uArray.contains(keys, key)) {\n        throw new Error(error.OPTION_NOT_EXISTS);\n    }\n\n    return this[key];\n};\n\n/**\n * Add new config to ConfigManager store\n *\n * First step : Lookup your config file in relation to your current environment\n * ${configDir}/${env}/configName.(js | json)\n *\n * First step bis : If 'configName' has not a specific file for your current environment, the system takes your default configuration.\n * ${configDir}/configName.(js | json)\n *\n * Second step : Each configuration is customizable by environment variables.\n * LOGGER__ACTIVE=true              => {'logger': {'active': true}}\n * LOGGER__WITH_COLOR=false         => {'logger': {'with_color': false}}\n * LOGGER__DEBUG__MAX_SIZE=4096     => {'logger': {'debug': {'max_size': 4096}}}\n *\n * Third step : Save config in the store\n *\n * ####Example:\n * configName : 'logger'      envArgs : {LOGGER__ACTIVE: true, LOGGER__WITH_COLOR: false, DB__HOSTNAME: 'localhost'}\n * #1 Get content file :\n *\n * config = {\n *      active: false,\n *      level: 'debug'\n * }\n *\n * #2 Result after overriding by environment variables :\n *\n * config = {\n *      active: true,\n *      level: 'debug',\n *      with_color: false\n * }\n *\n * #3 this.store['logger'] = config;\n *\n * @param {String} configName\n * @method addConfig\n *\n * @api public\n */\nConfigManager.prototype.addConfig = function (configName) {\n    if (arguments.length < 1 || 'string' !== typeof configName) {\n        throw new Error(error.BAD_PARAMETER);\n    }\n\n    //Check if already exists\n    if (this.store.hasOwnProperty(configName)) {\n        throw new Error(error.CONFIG_ALREADY_LOADED + configName);\n    }\n\n    //Load config from config files\n    if (!fileManager ||\n        fileManager.configDir !== this.configDir ||\n        fileManager.env !== this.env) {\n        fileManager = new FileManager(this.configDir, this.env);\n    }\n\n    //Load config and defaultConfig\n    var config = fileManager.getFile(configName) || {};\n    var defaultConfig = fileManager.getFile(configName, true) || {};\n\n    //Load envConfig with the environment variables\n    var regex = new RegExp('^' + configName.toUpperCase() + '__'),\n        data = {},\n        envConfig;\n\n    for (var propEnv in envArgs) {\n        if (envArgs.hasOwnProperty(propEnv) && propEnv.match(regex)) {\n            data[propEnv] = envArgs[propEnv];\n        }\n    }\n\n    envConfig = parser.parse(data, this.camelCase)[configName];\n\n    //Override defaultConfig with config\n    uObject.extend(defaultConfig, config);\n    config = defaultConfig;\n\n    //Override config with envConfig\n    uObject.extend(config, envConfig);\n\n    if (!uObject.isEmpty(config)) {\n        //Add new config to store\n        this.store[configName] = config;\n\n        //Create method\n        var methodName = configName.charAt(0).toUpperCase() + configName.slice(1).toLowerCase(),\n            self = this;\n\n        this.method[methodName] = function () {\n            return self.store[configName];\n        };\n        return this;\n    } else {\n        throw new Error(error.CONFIG_NOT_EXISTS + configName);\n    }\n};\n\n/**\n * Remove the 'configName' config from ConfigManager store\n *\n * @param {String} configName\n * @method removeConfig\n *\n * @api public\n */\nConfigManager.prototype.removeConfig = function (configName) {\n    if (arguments.length < 1 || 'string' !== typeof configName) {\n        throw new Error(error.BAD_PARAMETER);\n    }\n\n    //Check if the config exists\n    if (this.store.hasOwnProperty(configName)) {\n        //Delete the sconfig from store\n        delete this.store[configName];\n\n        //Delete method\n        var methodName = configName.charAt(0).toUpperCase() + configName.slice(1).toLowerCase();\n        delete this.method[methodName];\n\n        return this;\n    } else {\n        throw new Error(error.CONFIG_NOT_LOADED + configName);\n    }\n};\n\n/**\n * Get the 'configName' config from ConfigManager store\n *\n * @param {String} configName\n * @method getConfig\n *\n * @api public\n */\nConfigManager.prototype.getConfig = function (configName) {\n    return this.store[configName];\n};\n\n/**\n * Gets the number of configurations from store\n *\n * @method count\n *\n * @api public\n */\nConfigManager.prototype.count = function () {\n    return Object.keys(this.store).length;\n};\n\nvar configManager = module.exports = new ConfigManager();","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/lib/error.js":"'use strict';\n\nmodule.exports = {\n    TAG_UNKNOWN: 'This tag is unknown - ',\n    CONFIG_NOT_EXISTS: 'No file for this config - ',\n    CONFIG_NOT_LOADED: 'This config is not loaded - ',\n    CONFIG_ALREADY_LOADED: 'This config is already loaded - ',\n\n    BAD_PARAMETER: 'Bad parameter',\n    BAD_TYPE_MUST_BE_STRING: 'Bad type, this parameter must be a string - ',\n    BAD_TYPE_MUST_BE_BOOLEAN: 'Bad type, this parameter must be a boolean - ',\n\n    OPTION_NOT_EXISTS: 'This option isn\\'t exist',\n    OPTION_NOT_INITIALIZED: 'This option exists but it isn\\'t initialized - ',\n    MANAGER_CAN_NOT_BE_INITIALIZE_ANYMORE: 'The config manager can not be initialize anymore because there are configs already loaded'\n};","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/lib/utils/object.js":"'use strict';\n\nexports.isEmpty = function (obj) {\n    // null and undefined are \"empty\"\n    if (obj == null) {\n        return true;\n    }\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length > 0) {\n        return false;\n    }\n    if (obj.length === 0) {\n        return true;\n    }\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE < 9\n    for (var key in obj) {\n        /* istanbul ignore else */\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nvar extend = exports.extend = function (target, source) {\n    target = target || {};\n    source = source || {};\n\n    for (var prop in source) {\n        /* istanbul ignore else */\n        if (source.hasOwnProperty(prop)) {\n            if (source[prop] instanceof Array) {\n                // don't edit Array object - just replace\n                target[prop] = source[prop];\n            } else if (typeof source[prop] === 'object') {\n                target[prop] = extend(target[prop], source[prop]);\n            } else {\n                target[prop] = source[prop];\n            }\n        }\n    }\n    return target;\n};","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/lib/utils/array.js":"'use strict';\n\nexports.contains = function(a, obj) {\n\tvar i, length = a.length;\n\tfor (i = 0; i < length; i++) {\n\t\tif (a[i] === obj) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/lib/FileManager.js":"/* See LICENSE file for terms of use */\n'use strict';\n\nvar fs = require('fs'),\n    debug = require('debug')('configmanager:filemanager'),\n    path = require('path'),\n    yaml = require('js-yaml'),\n    error = require('./error'),\n    _require = require;\n\nvar EXTENSION_AVAILABLE = ['.js', '.json', '.yaml', '.yml'];\n\nfunction FileManager(configDir, env) {\n    if (arguments.length !== 2 ||\n        'string' !== typeof configDir ||\n        'string' !== typeof env) {\n        throw new Error(error.BAD_PARAMETER);\n    }\n\n    debug('Create FileManager object to %s and %s/%s', configDir, configDir, env);\n\n    this.configDir = configDir;\n    this.env = env;\n}\n\nFileManager.prototype.getFile = function (name, justDefault) {\n    var self = this,\n        content = null,\n        lookup = function (dir, file) {\n            var i, filepath, find = false;\n            for (i = 0; i < EXTENSION_AVAILABLE.length && find !== true; i++) {\n                filepath = path.resolve(dir + '/' + file + EXTENSION_AVAILABLE[i]);\n                debug('Lookup the config file : %s', filepath);\n                find = fs.existsSync(filepath);\n            }\n\n            if (find) {\n                return self.loadFile(filepath);\n            } else {\n                return null;\n            }\n        };\n\n    justDefault = justDefault || false;\n\n    if (!justDefault) {\n        //Lookup the file in env folder\n        content = lookup(path.resolve(this.configDir + '/' + this.env), name);\n    }\n\n    //Return result or lookup the file in config folder\n    return content ? content : lookup(path.resolve(this.configDir), name);\n};\n\nFileManager.prototype.loadFile = function (_path) {\n    var ext = path.extname(_path);\n\n    switch (ext) {\n        case '.js':\n        case '.json':\n            return _require(_path);\n        case '.yaml':\n        case '.yml':\n            try {\n                return yaml.safeLoad(fs.readFileSync(_path, 'utf8'));\n            } catch (e) {\n                throw new Error(e);\n            }\n    }\n};\n\nvar fileManager = module.exports = FileManager;","/home/travis/build/npmtest/node-npmtest-node-config-manager/node_modules/node-config-manager/lib/parser/parameter.js":"'use strict';\n\nvar error = require('../error');\n\nexports.parse = function(json, camelCase) {\n    if ('object' !== typeof json) {\n        return null;\n    }\n\n    camelCase = camelCase || false;\n\n    //Get keys\n    var levels, value, attr, _pObject, pObject,\n        object = {},\n        keys = Object.keys(json);\n\n    keys.forEach(function(key) {\n        value = json[key];\n\n        //split levels\n        levels = key.split('__');\n\n        //Back to top\n        _pObject = pObject = object;\n        attr = null;\n\n        levels.forEach(function(level) {\n            attr = convertStrArrayToString(level.split('_'), camelCase);\n\n            //Persist\n            _pObject = pObject;\n\n            //New Object\n            pObject[attr] = pObject[attr] || {};\n            pObject = pObject[attr];\n        });\n\n        //Save value\n        /* istanbul ignore else */\n        if (_pObject && attr) {\n            _pObject[attr] = validateValue(processTag(value));\n        }\n    });\n\n    return object;\n};\n\nvar parseNumber = function(value) {\n    return (value % 1 === 0 ? parseInt(value) : parseFloat(value));\n};\n\nvar valueFromTypeInference = function(value) {\n    switch (value) {\n        case 'true':\n            value = true;\n            break;\n        case 'false':\n            value = false;\n            break;\n        default:\n            if ('string' === typeof value) {\n                //String or Number\n                value = isNaN(value) ? value : parseNumber(value);\n            }\n            break;\n    }\n    return value;\n};\n\nvar valueFromTypePrefix = function(value) {\n    var matches = value.match(typePrefixRegex),\n        type = matches[1],\n        val = matches[2];\n    switch(type){\n        case 'string':\n            value = val;\n            break;\n        case 'boolean':\n            value = (val === 'true');\n            break;\n        case 'number':\n            value = parseNumber(val);\n            break;\n        default:\n            // Should not happen thanks to regexp\n            value = null;\n            break;\n    }\n    return value;\n};\n\nvar typePrefixRegex = /^ncm_(string|number|boolean):(.*)$/;\nvar validateValue = function(value) {\n    if(value.search && value.search(typePrefixRegex)>=0){\n        // Value has type prefix (`ncm_(string|numnber|boolean)`), use type prefix to parse data\n        value = valueFromTypePrefix(value);\n    }\n    else\n        // No type prefix, use type inference\n        value = valueFromTypeInference(value);\n    return value;\n};\n\nvar convertStrArrayToString =\n    exports.convertStrArrayToString = function(strArray, camelCase) {\n        var i,\n            length = strArray.length,\n            str = '';\n\n        for (i = 0; i < length; i++) {\n            if (camelCase) {\n                str += (i === 0 ? strArray[i].toLowerCase() : strArray[i].charAt(0).toUpperCase() + strArray[i].slice(1).toLowerCase());\n            } else {\n                str += (i === 0 ? strArray[i].toLowerCase() : '_' + strArray[i].toLowerCase());\n\n            }\n        }\n\n        return str;\n    };\n\nvar tagRegex = /\\$\\{[a-zA-Z_]+\\}/,\n    resolveRegex = /[a-zA-Z_]+/;\n\nvar processTag =\n    exports.processTag = function(str) {\n        if ('string' !== typeof str) {\n            return str;\n        }\n\n        var tag;\n        while (str.search(tagRegex) >= 0) {\n            tag = str.match(tagRegex)[0];\n            str = str.replace(tag, resolveTag(tag), 'g');\n        }\n        return str;\n    };\n\nvar resolveTag = function(tag) {\n    //Extract a-zA-Z_\n    var extract = tag.match(resolveRegex),\n        resolved = process.env[extract];\n    if (resolved) {\n        return resolved;\n    } else {\n        throw new Error(error.TAG_UNKNOWN + tag);\n    }\n};"}